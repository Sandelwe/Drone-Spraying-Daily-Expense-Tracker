<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drone Expense Tracker</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
        /* Custom scrollbar for the expense list */
        .expense-list-container::-webkit-scrollbar {
            width: 8px;
        }
        .expense-list-container::-webkit-scrollbar-track {
            background: #e0e0e0;
            border-radius: 10px;
        }
        .expense-list-container::-webkit-scrollbar-thumb {
            background: #a0a0a0;
            border-radius: 10px;
        }
        .expense-list-container::-webkit-scrollbar-thumb:hover {
            background: #808080;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4 sm:p-6 lg:p-8">
    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-lg w-full max-w-4xl border border-gray-200">
        <h1 class="text-3xl sm:text-4xl font-bold text-center text-gray-800 mb-6 sm:mb-8">Drone Spraying Expense Tracker</h1>

        <!-- User ID Display -->
        <div class="mb-6 text-center text-sm text-gray-600">
            Your User ID: <span id="userIdDisplay" class="font-semibold text-blue-600">Loading...</span>
        </div>

        <!-- Expense Input Form -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
                <label for="expenseDate" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input type="date" id="expenseDate" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
            </div>
            <div>
                <label for="expenseCategory" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select id="expenseCategory" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">Select a category</option>
                    <option value="Fuel">Fuel</option>
                    <option value="Maintenance & Repairs">Maintenance & Repairs</option>
                    <option value="Chemicals & Solutions">Chemicals & Solutions</option>
                    <option value="Labor">Labor</option>
                    <option value="Transportation & Logistics">Transportation & Logistics</option>
                    <option value="Equipment Rental/Lease">Equipment Rental/Lease</option>
                    <option value="Miscellaneous">Miscellaneous</option>
                </select>
            </div>
            <div class="md:col-span-2">
                <label for="expenseDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <input type="text" id="expenseDescription" placeholder="e.g., Diesel for bakkie, Glyphosate 10L" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
            </div>
            <div>
                <label for="expenseAmount" class="block text-sm font-medium text-gray-700 mb-1">Amount (E)</label>
                <input type="number" id="expenseAmount" step="0.01" placeholder="e.g., 500.00" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
            </div>
            <div class="flex items-end">
                <button id="addExpenseBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75">
                    Add Expense
                </button>
            </div>
        </div>

        <!-- Message Box for alerts -->
        <div id="messageBox" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span id="messageText" class="block sm:inline"></span>
        </div>

        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="hidden text-center text-blue-600 font-medium my-4">
            Loading expenses...
        </div>

        <!-- Expense List -->
        <h2 class="text-2xl font-bold text-gray-800 mb-4">Recent Expenses</h2>
        <div class="expense-list-container max-h-96 overflow-y-auto border border-gray-300 rounded-md shadow-inner">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50 sticky top-0">
                    <tr>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount (E)</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="expenseList" class="bg-white divide-y divide-gray-200">
                    <!-- Expenses will be loaded here by JavaScript -->
                    <tr>
                        <td colspan="5" class="px-4 py-4 whitespace-nowrap text-sm text-gray-500 text-center" id="noExpensesMessage">No expenses recorded yet.</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, deleteDoc, doc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let userId = null;
        let isAuthReady = false;

        const expenseDateInput = document.getElementById('expenseDate');
        const expenseCategorySelect = document.getElementById('expenseCategory');
        const expenseDescriptionInput = document.getElementById('expenseDescription');
        const expenseAmountInput = document.getElementById('expenseAmount');
        const addExpenseBtn = document.getElementById('addExpenseBtn');
        const expenseListTableBody = document.getElementById('expenseList');
        const noExpensesMessage = document.getElementById('noExpensesMessage');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const messageBox = document.getElementById('messageBox');
        const messageText = document.getElementById('messageText');

        /**
         * Displays a message in the message box.
         * @param {string} message - The message to display.
         * @param {boolean} isError - True if it's an error message, false for success/info.
         */
        function showMessage(message, isError = true) {
            messageText.textContent = message;
            if (isError) {
                messageBox.classList.remove('bg-green-100', 'border-green-400', 'text-green-700');
                messageBox.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
            } else {
                messageBox.classList.remove('bg-red-100', 'border-red-400', 'text-red-700');
                messageBox.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
            }
            messageBox.classList.remove('hidden');
            // Hide message after 5 seconds
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 5000);
        }

        /**
         * Initializes Firebase and sets up authentication.
         */
        async function initializeFirebase() {
            try {
                if (Object.keys(firebaseConfig).length === 0) {
                    console.error("Firebase config is empty. Please ensure __firebase_config is provided.");
                    showMessage("Firebase configuration is missing. Cannot initialize app.", true);
                    return;
                }
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Listen for auth state changes
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = userId;
                        isAuthReady = true;
                        console.log("Firebase Auth Ready. User ID:", userId);
                        // Fetch expenses only after auth is ready
                        setupExpenseListener();
                    } else {
                        // Sign in anonymously if no custom token or if user logs out
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                            console.log("Signed in with custom token.");
                        } else {
                            await signInAnonymously(auth);
                            console.log("Signed in anonymously.");
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing Firebase:", error);
                showMessage(`Failed to initialize Firebase: ${error.message}`, true);
            }
        }

        /**
         * Adds a new expense to Firestore.
         */
        async function addExpense() {
            if (!isAuthReady) {
                showMessage("Authentication not ready. Please wait.", true);
                return;
            }

            const date = expenseDateInput.value;
            const category = expenseCategorySelect.value;
            const description = expenseDescriptionInput.value.trim();
            const amount = parseFloat(expenseAmountInput.value);

            // Basic validation
            if (!date || !category || !description || isNaN(amount) || amount <= 0) {
                showMessage("Please fill in all fields correctly: Date, Category, Description, and a positive Amount.", true);
                return;
            }

            try {
                loadingIndicator.classList.remove('hidden');
                await addDoc(collection(db, `artifacts/${appId}/users/${userId}/drone_expenses`), {
                    date: date,
                    category: category,
                    description: description,
                    amount: amount,
                    timestamp: new Date().toISOString() // Use ISO string for consistent sorting
                });
                showMessage("Expense added successfully!", false);
                // Clear form fields
                expenseDateInput.value = '';
                expenseCategorySelect.value = '';
                expenseDescriptionInput.value = '';
                expenseAmountInput.value = '';
            } catch (e) {
                console.error("Error adding document: ", e);
                showMessage(`Error adding expense: ${e.message}`, true);
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        }

        /**
         * Deletes an expense from Firestore.
         * @param {string} expenseId - The ID of the expense document to delete.
         */
        async function deleteExpense(expenseId) {
            if (!isAuthReady) {
                showMessage("Authentication not ready. Please wait.", true);
                return;
            }

            // Custom confirmation dialog (instead of alert/confirm)
            const confirmation = document.createElement('div');
            confirmation.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50';
            confirmation.innerHTML = `
                <div class="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full">
                    <p class="text-lg font-semibold mb-4 text-gray-800">Confirm Deletion</p>
                    <p class="text-gray-700 mb-6">Are you sure you want to delete this expense?</p>
                    <div class="flex justify-end space-x-3">
                        <button id="cancelDelete" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-200">Cancel</button>
                        <button id="confirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition duration-200">Delete</button>
                    </div>
                </div>
            `;
            document.body.appendChild(confirmation);

            document.getElementById('confirmDelete').onclick = async () => {
                document.body.removeChild(confirmation);
                try {
                    loadingIndicator.classList.remove('hidden');
                    await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/drone_expenses`, expenseId));
                    showMessage("Expense deleted successfully!", false);
                } catch (e) {
                    console.error("Error deleting document: ", e);
                    showMessage(`Error deleting expense: ${e.message}`, true);
                } finally {
                    loadingIndicator.classList.add('hidden');
                }
            };

            document.getElementById('cancelDelete').onclick = () => {
                document.body.removeChild(confirmation);
            };
        }

        /**
         * Sets up a real-time listener for expenses from Firestore.
         */
        function setupExpenseListener() {
            if (!db || !userId) {
                console.warn("Firestore or User ID not available for listener setup.");
                return;
            }

            const expensesRef = collection(db, `artifacts/${appId}/users/${userId}/drone_expenses`);
            // Note: orderBy is commented out due to potential index issues. Data will be sorted in JS.
            const q = query(expensesRef); //, orderBy("timestamp", "desc"));

            loadingIndicator.classList.remove('hidden');
            onSnapshot(q, (snapshot) => {
                const expenses = [];
                snapshot.forEach((doc) => {
                    expenses.push({ id: doc.id, ...doc.data() });
                });

                // Sort expenses by date (descending) and then by timestamp (descending) in JavaScript
                expenses.sort((a, b) => {
                    const dateA = new Date(a.date);
                    const dateB = new Date(b.date);
                    if (dateA < dateB) return 1;
                    if (dateA > dateB) return -1;
                    // If dates are the same, sort by timestamp
                    const timestampA = new Date(a.timestamp);
                    const timestampB = new Date(b.timestamp);
                    if (timestampA < timestampB) return 1;
                    if (timestampA > timestampB) return -1;
                    return 0;
                });

                displayExpenses(expenses);
                loadingIndicator.classList.add('hidden');
            }, (error) => {
                console.error("Error fetching expenses:", error);
                showMessage(`Error fetching expenses: ${error.message}`, true);
                loadingIndicator.classList.add('hidden');
            });
        }

        /**
         * Displays the list of expenses in the table.
         * @param {Array<Object>} expenses - An array of expense objects.
         */
        function displayExpenses(expenses) {
            expenseListTableBody.innerHTML = ''; // Clear existing list

            if (expenses.length === 0) {
                noExpensesMessage.classList.remove('hidden');
            } else {
                noExpensesMessage.classList.add('hidden');
                expenses.forEach(expense => {
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    row.innerHTML = `
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-800">${expense.date}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-800">${expense.category}</td>
                        <td class="px-4 py-3 whitespace-normal text-sm text-gray-800">${expense.description}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-800 font-medium">E ${expense.amount.toFixed(2)}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                            <button class="text-red-600 hover:text-red-900 transition duration-200 delete-btn" data-id="${expense.id}">Delete</button>
                        </td>
                    `;
                    expenseListTableBody.appendChild(row);
                });

                // Attach event listeners to delete buttons
                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const expenseId = event.target.dataset.id;
                        deleteExpense(expenseId);
                    });
                });
            }
        }

        // Event Listeners
        addExpenseBtn.addEventListener('click', addExpense);

        // Initialize the app when the window loads
        window.onload = initializeFirebase;

        // Set default date to today
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        expenseDateInput.value = `${year}-${month}-${day}`;
    </script>
</body>
</html>

